{"version":3,"sources":["component/Weather.component.jsx","component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celcius","icon","faTemperatureHigh","min","max","faTemperatureLow","minmaxTemp","temp_min","temp_max","description","faCloudSunRain","protoTypes","string","isRequired","country","Form","error","role","unavailable","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","cod","setState","undefined","main","celcius","sys","calCelsius","temp","weather","get_WeatherIcon","id","state","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","clear","style","textStyle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7a20b0e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport protoTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTemperatureHigh } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTemperatureLow } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCloudSunRain } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nconst Weather = (props) =>{\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"cards pt-5 text-white text-center\" >\r\n                <h3>{props.city}</h3>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-4`}></i>\r\n                </h5>\r\n                \r\n                {/* <h1 className=\"py-3\">{props.temp_celcius}&deg;</h1> */}\r\n\r\n                {props.temp_celcius ? (\r\n                \r\n                <h2 className=\"py-3\" ><FontAwesomeIcon icon={faTemperatureHigh}/> <span className=\"pt-2\"> {props.temp_celcius}&deg;</span></h2>\r\n                \r\n                ) : null}\r\n                \r\n                {/* show max and min temperature */}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                {props.description ? (<h5 className=\"py-3\"><FontAwesomeIcon icon={faCloudSunRain} /> <span> {props.description}</span></h5>) : null}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction minmaxTemp(min,max){\r\n   if(min && max){\r\n    return (\r\n        <h4>\r\n            <span className=\"px-4\"><FontAwesomeIcon icon={faTemperatureHigh}/> {min}&deg;</span>\r\n            <span className=\"px-4\"><FontAwesomeIcon icon={faTemperatureLow}/> {max}&deg;</span>\r\n        </h4>\r\n    )\r\n   }    \r\n}\r\n\r\n\r\nWeather.protoTypes = {\r\n    city: protoTypes.string.isRequired,\r\n    country: protoTypes.string.isRequired,\r\n    temp_celcius: protoTypes.string.isRequired,\r\n    temp_min: protoTypes.string.isRequired,\r\n    temp_max: protoTypes.string.isRequired ,\r\n    description: protoTypes.string.isRequired\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props =>{\r\n    return (\r\n        <div className=\"container-fluid pt-sm-4\">\r\n            <h1 className=\"text-warning\">Weather Watcher</h1>\r\n            <div>{props.error ? error() : null} {props.unavailable ? unavailable() : null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 mt-5 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 mt-5\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 mt-5 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error (){\r\n    return (\r\n        <p className=\"text-light my-1\" role=\"alert\">\r\n            Please enter a valid city and country\r\n        </p>  \r\n    )\r\n}\r\n\r\nfunction unavailable (){\r\n    return (\r\n        <p className=\"text-light my-1\" role=\"alert\">\r\n           Oops! City not found\r\n        </p>  \r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\nimport './App.css';\nimport Weather from './component/Weather.component'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'weather-icons/css/weather-icons.css'\nimport Form from './component/form.component'\n\n// api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_KEY = '4d5e209ca8dad317a12c064bb3b5fb2b';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celcius: undefined,\n      temp_min: undefined,\n      temp_max: undefined,\n      description: undefined,\n      error: false,\n      unavailable: false\n    };\n\n    this.weatherIcon ={\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n\n\n\n  calCelsius(temp){\n    let cel = Math.floor(temp - 273.15)\n    return cel;\n  }\n\n\n  get_WeatherIcon(icons, rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232: this.setState({icon:this.weatherIcon.Thunderstorm})\n      break;\n\n      case rangeId >= 300 && rangeId <= 321: this.setState({icon:this.weatherIcon.Drizzle})\n      break;\n\n      case rangeId >= 500 && rangeId <= 531: this.setState({icon:this.weatherIcon.Rain})\n      break;\n\n      case rangeId >= 600 && rangeId <= 622: this.setState({icon:this.weatherIcon.Snow})\n      break;\n\n      case rangeId === 800: this.setState({icon:this.weatherIcon.Clear})\n      break;\n\n      case rangeId >= 801 && rangeId <= 804: this.setState({icon:this.weatherIcon.Clouds})\n      break;\n\n      default:\n        this.state({icons: this.weatherIcon.clear});\n    }\n  }\n\n\n\n  getWeather = async(e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    \n    if(city && country){\n\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n\n      const response = await api_call.json(); \n\n      console.log(response)\n      \n      if(response.cod === '404'){\n        this.setState({\n          city: undefined,\n          country: undefined,\n          icon: undefined,\n          main: undefined,\n          celcius: undefined,\n          temp_min: undefined,\n          temp_max: undefined,\n          description: undefined,\n          error: false,\n          unavailable:true\n        })\n\n      }else{\n        this.setState({\n          city: `${response.name} , ${response.sys.country}`,\n          country: response.sys.country,\n          celcius: this.calCelsius(response.main.temp),\n          temp_min: this.calCelsius(response.main.temp_min),\n          temp_max: this.calCelsius(response.main.temp_max),\n          description: response.weather[0].description,\n          error: false,\n          unavailable:false\n        })\n    \n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id )\n      }\n      \n    }else{\n      this.setState({\n        city: undefined,\n        country: undefined,\n        icon: undefined,\n        main: undefined,\n        celcius: undefined,\n        temp_min: undefined,\n        temp_max: undefined,\n        description: undefined,\n        error:true,\n        unavailable:false\n      });\n    }\n    \n    \n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error} unavailable={this.state.unavailable}/>\n        <Weather\n          style={this.textStyle} \n          city={this.state.city} \n          country={this.state.country} \n          temp_celcius={this.state.celcius}\n          temp_min = {this.state.temp_min}\n          temp_max = {this.state.temp_max}\n          description = {this.state.description} \n          weatherIcon = {this.state.icon}\n        />\n      </div>\n    ); \n  }\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}